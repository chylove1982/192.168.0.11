<#@ template language="C#" #>
using System;
using System.Linq;
using System.Threading.Tasks;
using Temii.Extentions;
using Temii.ModelCore;
using Temii.ModelCore.EntityBase;
using <#= _prefix #>.Module.<#= _model.Project.Code #>.Application.<#= _class.Name #>Service.ViewModels;
using <#= _prefix #>.Module.<#= _model.Project.Code #>.Domain.<#= _class.Name #>;
using <#= _prefix #>.Module.<#= _model.Project.Code #>.Domain.<#= _class.Name #>.Models;

namespace <#= _prefix #>.Module.<#= _model.Project.Code #>.Application.<#= _class.Name #>Service
{
    public class <#= _class.Name #>Service : BaseBLL<<#= _class.Name #>>, I<#= _class.Name #>Service
    {
      

<# if(_class.Method.Query) {#>
        public async Task<IResultModel> Query(<#= _class.Name #>QueryModel model)
        {
            var PageSize = model.Paging.Size<=0?30:model.Paging.Size;
            var PageIndex = model.Paging.Index <= 1 ? 1 : model.Paging.Index;
             var result = new QueryResultModel<<#= _class.Name #>>
            {
                Rows = GetPageByContains(PageIndex, PageSize, out int Total, p=>p.Name==model.Name),
                PageCount = (Total + PageSize - 1) / PageSize,
                TotalCount = Total
            };
            return ResultModel.Success(result);
        }

<#} #>
<# if(_class.Method.Add) {#>
        public async Task<IResultModel> Add(<#= _class.Name #>AddModel model)
        {
            var entity = new <#= _class.Name #>Entity();
            var result = Add(entity);
            return ResultModel.Result(result);
        }

<#} #>
<# if(_class.Method.Delete) {#>
        public async Task<IResultModel> Delete(<#= _class.PrimaryKeyTypeName #> id)
        {
            var result = RemoveByKey(id);
            return ResultModel.Result(result);
        }

<#} #>
<# if(_class.Method.Edit) {#>
        public async Task<IResultModel> Edit(<#= _class.PrimaryKeyTypeName #> id)
        {
            var entity = GetModeleByKey(id);
            if (entity == null)
                return ResultModel.NotExists;

          
            return ResultModel.Success(model);
        }

        public async Task<IResultModel> Update(<#= _class.Name #>UpdateModel model)
        {
		    <#= _class.Name #>Entity entity = new <#= _class.Name #>Entity();
            model.CopyTo(entity);
            var result = Update(Enum);
            return ResultModel.Result(result);
        }
<#} #>
    }
}
